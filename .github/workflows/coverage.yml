name: Coverage
on: [ pull_request ]
jobs:
  job:
    runs-on: ubuntu-latest

    name: Coverage

    steps: 
      - name: Checkout
        uses: actions/checkout@v3

      - name: Instal Gcovr
        run: pip install gcovr

      - name: Install CMake
        uses: lukka/get-cmake@latest
      
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v10
        id: runvcpkg
        with:
          vcpkgDirectory: '${{github.workspace}}/vcpkg'
          vcpkgGitCommitId: '53bef8994c541b6561884a8395ea35715ece75db'
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Configure CMake
        run: 'cmake -S ${{github.workspace}} -B ${{github.workspace}}/build -G "Ninja" 
          -DBUILD_APPS=OFF 
          -DBUILD_SHARED_LIBS=OFF 
          -DBUILD_DRIVER=ON 
          -DBUILD_TESTING=ON 
          -DBUILD_EXAMPLE=OFF 
          -DBUILD_GRAPH=OFF 
          -DBUILD_DOCUMENTATION=OFF 
          -DENABLE_INSTALL=OFF 
          -DENABLE_PEDANTIC=OFF 
          -DENABLE_WERROR=OFF 
          -DENABLE_COVERAGE=ON 
          -DENABLE_SANITIZER=OFF 
          -DMSVC_STATIC_RUNTIME=OFF 
          -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake'

      - name: Build Debug
        run: 'cmake --build ${{github.workspace}}/build --config Debug'
        
      - name: Test Debug
        working-directory: ${{github.workspace}}/build
        run: ctest -C Debug -VV

      - name: Generate reports
        run: |
          gcovr --root ${{github.workspace}}/ --html --html-details --output ${{github.workspace}}/coverage.html
          echo $?

      - name: Send reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          gcov: true
          directory: ${{github.workspace}}
